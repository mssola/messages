apiVersion: v1
kind: Service
metadata:
  name: messages
  labels:
    app: messages
spec:
  type: NodePort
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: messages
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: messages
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: messages
    spec:
      containers:
      - name: messages
        image: mssola/messages:0.1
        env:
        - name: MESSAGES_REDIS_HOST
          value: "$(REDIS_SERVICE_HOST)"
        - name: MESSAGES_REDIS_PORT
          value: "$(REDIS_SERVICE_PORT)"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  labels:
    app: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:5.0.3
        resources:
          requests:
            cpu: 100m
            memory: 300Mi
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-storage
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: redis-storage
  labels:
    storage: redis
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Recycle
  hostPath:
    path: /opt/messages-data
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: redis-storage
  labels:
    storage: redis
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
